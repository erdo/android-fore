/**
 *
 * Publish the SDK to an Amazon s3 repo
 *
 *
 * ./gradlew asaf-adapters:install
 * ./gradlew asaf-adapters:publishAsafPublicationToMavenRepository
 *
 */


apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'




def secrets = new Properties()
def secretsFile = new File('asaf/secrets.properties')

if (secretsFile.canRead()) {
    secrets.load(new FileInputStream(secretsFile))
} else {
    println 'asaf/secrets.properties not found, expecting to find the AWS access details there if building locally'
}
def AWS_ACCESS_KEY = System.getenv("AWS_ACCESS_KEY") ?: secrets.AWS_ACCESS_KEY
def AWS_SECRET_KEY = System.getenv("AWS_SECRET_KEY") ?: secrets.AWS_SECRET_KEY


println "AWS_ACCESS_KEY:${AWS_ACCESS_KEY}"
println "AWS_SECRET_KEY:${AWS_SECRET_KEY}"






def isRelease() {
    return !LIB_VERSION_NAME.contains("SNAPSHOT")
}

def getOutputDir() {
    return "${project.buildDir}/${isRelease() ? 'releases' : 'snapshots'}"
}

def getRepositoryUrl() {
    return "s3://com.ixpocket.repo.s3.eu-west-2.amazonaws.com/${LIB_VERSION_NAME.contains("SNAPSHOT") ? 'snapshots' : 'releases'}"
}




//makes the right type of pom file for an android aar and puts it all in the local maven repo
install {

    println 'INSTALL BLOCK'

    println "LIB_GROUP:${rootProject.ext.LIB_GROUP}"
    println "LIB_ARTIFACT_ID:${LIB_ARTIFACT_ID}"
    println "LIB_VERSION_NAME:${rootProject.ext.LIB_VERSION_NAME}"
    println "LIB_DESCRIPTION:${LIB_DESCRIPTION}"

    repositories{
        mavenInstaller {
            pom.project {
                groupId rootProject.ext.LIB_GROUP
                artifactId LIB_ARTIFACT_ID
                version rootProject.ext.LIB_VERSION_NAME
            }
        }
        mavenDeployer {
            pom.project {
                groupId rootProject.ext.LIB_GROUP
                artifactId LIB_ARTIFACT_ID
                version rootProject.ext.LIB_VERSION_NAME
            }
            repository(url: "file:///" + getOutputDir())
        }
    }
}





task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}




publishing {
    publications {
        asaf (MavenPublication) {
            groupId rootProject.ext.LIB_GROUP
            artifactId LIB_ARTIFACT_ID
            version rootProject.ext.LIB_VERSION_NAME

            artifact "${buildDir}/outputs/aar/asaf-adapters-debug.aar"

            //artifact sourcesJar
            //artifact javadocJar


            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // List all compile dependencies and write to POM
                configurations.compile.getAllDependencies().each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }

        }
    }
    repositories {
        maven {
            url getRepositoryUrl()
            credentials(AwsCredentials) {
                accessKey AWS_ACCESS_KEY
                secretKey AWS_SECRET_KEY
            }
        }
    }
}

